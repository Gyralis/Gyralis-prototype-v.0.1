/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  31337: {
    FacetRegistry: {
      address: "0xdbd296711ec8ef9aacb623ee3f1c0922dce0d7b2",
      abi: [
        {
          type: "function",
          name: "addFacet",
          inputs: [
            {
              name: "facet",
              type: "address",
              internalType: "address",
            },
            {
              name: "selectors",
              type: "bytes4[]",
              internalType: "bytes4[]",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "computeFacetAddress",
          inputs: [
            {
              name: "salt",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "creationCode",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "facet",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "deployFacet",
          inputs: [
            {
              name: "salt",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "creationCode",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "selectors",
              type: "bytes4[]",
              internalType: "bytes4[]",
            },
          ],
          outputs: [
            {
              name: "facet",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "facetAddresses",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address[]",
              internalType: "address[]",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "facetSelectors",
          inputs: [
            {
              name: "facet",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes4[]",
              internalType: "bytes4[]",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getFacetBySelector",
          inputs: [
            {
              name: "selector",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "removeFacet",
          inputs: [
            {
              name: "facet",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "FacetRegistered",
          inputs: [
            {
              name: "facet",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "selectors",
              type: "bytes4[]",
              indexed: false,
              internalType: "bytes4[]",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "FacetUnregistered",
          inputs: [
            {
              name: "facet",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "Create2EmptyBytecode",
          inputs: [],
        },
        {
          type: "error",
          name: "FacetRegistry_FacetAddressZero",
          inputs: [],
        },
        {
          type: "error",
          name: "FacetRegistry_FacetAlreadyRegistered",
          inputs: [],
        },
        {
          type: "error",
          name: "FacetRegistry_FacetMustHaveSelectors",
          inputs: [],
        },
        {
          type: "error",
          name: "FacetRegistry_FacetNotContract",
          inputs: [],
        },
        {
          type: "error",
          name: "FacetRegistry_FacetNotRegistered",
          inputs: [],
        },
        {
          type: "error",
          name: "FailedDeployment",
          inputs: [],
        },
        {
          type: "error",
          name: "InsufficientBalance",
          inputs: [
            {
              name: "balance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
      ],
      inheritedFunctions: {
        addFacet: "contracts/registry/IFacetRegistry.sol",
        computeFacetAddress: "contracts/registry/IFacetRegistry.sol",
        deployFacet: "contracts/registry/IFacetRegistry.sol",
        facetAddresses: "contracts/registry/IFacetRegistry.sol",
        facetSelectors: "contracts/registry/IFacetRegistry.sol",
        getFacetBySelector: "contracts/registry/IFacetRegistry.sol",
        removeFacet: "contracts/registry/IFacetRegistry.sol",
      },
    },
    DiamondFactory: {
      address: "0x4e85dc48a70da1298489d5b6fc2492767d98f384",
      abi: [
        {
          type: "function",
          name: "createDiamond",
          inputs: [
            {
              name: "initParams",
              type: "tuple",
              internalType: "struct IDiamond.InitParams",
              components: [
                {
                  name: "baseFacets",
                  type: "tuple[]",
                  internalType: "struct IDiamond.FacetCut[]",
                  components: [
                    {
                      name: "facet",
                      type: "address",
                      internalType: "address",
                    },
                    {
                      name: "action",
                      type: "uint8",
                      internalType: "enum IDiamond.FacetCutAction",
                    },
                    {
                      name: "selectors",
                      type: "bytes4[]",
                      internalType: "bytes4[]",
                    },
                  ],
                },
                {
                  name: "init",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "initData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "diamond",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "DiamondCreated",
          inputs: [
            {
              name: "diamond",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "deployer",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "DiamondFactory_LoupeNotSupported",
          inputs: [],
        },
      ],
      inheritedFunctions: {
        createDiamond: "contracts/factory/IDiamondFactory.sol",
      },
    },
    TestToken: {
      address: "0x150890d6984e98f408162ee65684779804bff858",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "name",
              type: "string",
              internalType: "string",
            },
            {
              name: "symbol",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "allowance",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "approve",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "balanceOf",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "decimals",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint8",
              internalType: "uint8",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "name",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "symbol",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "totalSupply",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "transfer",
          inputs: [
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "Approval",
          inputs: [
            {
              name: "owner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "Transfer",
          inputs: [
            {
              name: "from",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "ERC20InsufficientAllowance",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "allowance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InsufficientBalance",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "balance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidApprover",
          inputs: [
            {
              name: "approver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidReceiver",
          inputs: [
            {
              name: "receiver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidSender",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidSpender",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
          ],
        },
      ],
      inheritedFunctions: {
        allowance: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        approve: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        balanceOf: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        decimals: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        name: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        symbol: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        totalSupply:
          "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        transfer: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        transferFrom:
          "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
      },
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
